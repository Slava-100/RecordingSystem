@page "/doctors/{Id:int}"
@inject NavigationManager Navigator


<div class="container-doctors" id="show">
	<div class="doctor-card">
		@if (doctor.Male == true)
		{
			  <div class="doctor-pic">
			  <img class="photo-doctor" src="/css/Images/Male/{True}.png" alt="photo" />
			  </div>
		}
		else
		{
			  <div class="doctor-pic">
			  <img  class="photo-doctor" src="/css/Images/Male/{False}.png" alt="photo" />
			  </div>
		}
		<div class="doctor-text-in-card">
			<h6>Имя: @doctor.Name</h6>
			<h6>Фамилия: @doctor.LastName</h6>
			
			@if (@doctor.Male) 
			{
				<h6>Пол: "Мужской"</h6>
			}
			else
			{
				<h6>"Женский"</h6>
			}
			
			@if (@doctor.Specialization is not null)
			{
				<h6>Специализация : @doctor.Specialization.Name</h6>
			}
			else
			{
				<h6 style="color:red">Специализация :Нет специализации</h6>
			}
			@if (@doctor.Cabinet is not null)
			{
				<h6>Кабинет: @doctor.Cabinet.Number</h6>
			}
			else
			{
				<h6 style="color:red">Кабинет: :Нет кабинета</h6>
			}
			
			<h6>День рождения: @birthday</h6>
			
			@if (@doctor.Email is not null)
			{
				<h6>Почта: @doctor.Email</h6>
			}
			else
			{
				<h6 style="color:red">Почта: :Нет почты</h6>
			}
			
			@if (@doctor.PhoneNumber is not null)
			{
				<h6>Номер телефона: @doctor.PhoneNumber</h6>
			}
			else
			{
				<h6 style="color:red">Номер телефона: :Нет номера</h6>
			}
		</div>
	</div>
	<div class="show-timeTable">
	<button @onclick="ShowTimeTable">Показать рабочее расписание</button>
	<button @onclick="Back">Назад</button>
	<div>
		@if (_showTimeTable == true)
		{
			@if (_timeTables.Count() == 0)
			{
				<h3>Пусто</h3>
				<button @onclick="FillTimeTableByDoctor">Заполнить</button>
			}
			else
			{
				<ul class="page-menu">
					<li>
						<a href=""><span>|День недели|</span></a>
						<em>|Время|</em>
					</li>
					@foreach (var d in _dates)
					{
						<li class="li-timeTable"><span> @d.DayOfWeek </span>
							<em>
								<button @onclick="btnUpdate">Обновить</button>
								@foreach (var t in _timeSpans)
								{
									<h3 @onclick="(() => Update(t))">@t.Start - @t.End</h3>
								}
								@if (_update == true)
								{
									<input type="text" @bind="_start" /> <input type="text" @bind="_end" />
								}
				
								</em>
						</li>
					}
				</ul>
			}
		}
	</div>
	</div>
</div>



@code {

	[Parameter] public int Id { get; set; }

	private List<DoctorOutputModel> doctors;

	private DoctorOutputModel doctor;
	private string birthday;
	private List<TimeTableOutputModel> _timeTables;
	private bool _showTimeTable = false;
	private List<DateTime> _dates = new List<DateTime>();
	private List<TimeSpanOutputModel> _timeSpans = new List<TimeSpanOutputModel>();
	private string _start;
	private string _end;
	private bool _update = false;

	protected override void OnInitialized()
	{
		doctors = new DoctorManager().GetAllDoctors();
		doctor = doctors[IndexDoctorByListDoctorsAndId(doctors , Id)];
		birthday = doctor.Birthday.ToString("dd.MM.yyyy");
		_timeTables = new List<TimeTableOutputModel>();
	}

	private int IndexDoctorByListDoctorsAndId(List<DoctorOutputModel> doctors , int Id)
	{
		int index = 0;
		int counter = -1;
		foreach (var i in doctors)
		{
			counter++;
			if (i.Id == Id)
			{
				index = counter;
			}
		}
		return index;
	}

	private void ShowTimeTable()
	{
		_showTimeTable = true;
		_timeTables = new TimeTableManager().GetTimeTableByDoctorId(Id);
		foreach(var t in _timeTables)
		{
			if(!_dates.Any(d => d == t.DayOfWeek.Name))
			{
				_dates.Add(t.DayOfWeek.Name);
			}
			_timeSpans = new TimeSpanManager().GetAllTimeSpan();
		}

		InvokeAsync(StateHasChanged);
	}

	private void FillTimeTableByDoctor()
	{
		_showTimeTable = false;
		new TimeTableManager().FillTimeTableByDoctorId(Id);
		InvokeAsync(StateHasChanged);
	}

	private void Back()
	{
		Navigator.NavigateTo("/doctors", true);
	}

	private void btnUpdate()
	{
		_update = true;	
	}

	private void Update(TimeSpanOutputModel t)
	{
		if (_start is not null && _end is not null)
		{
			UpdateTimeSpanInputModel updateTimeSpanInputModel = new UpdateTimeSpanInputModel()
				{
					Id = t.Id,
					Start = TimeSpan.Parse(_start),
					End = TimeSpan.Parse(_end)
				};
			new TimeSpanManager().UpdateTimeSpanById(updateTimeSpanInputModel);
		}
		_update = false;
		_timeSpans = new TimeSpanManager().GetAllTimeSpan();
		InvokeAsync(StateHasChanged);
	}
}
@page "/service/{Id:int}"
@inject NavigationManager Navigator

<div class="service-center">
    <h1><strong>Название:</strong> @_service.Name</h1>
    @if (_service.Price is not null)
    {
        <h3><strong>Цена:</strong> @_service.Price руб</h3>
    } 
    else 
    {
        <h3><strong>Цена:</strong> - </h3>
    }

    @if (_service.Male is not null)
    {
        if (_service.Male == true)
        {
            OutputMale = "муж";
        }
        else if (_service.Male == false)
        {
            OutputMale = "жен";
        }
        <h3><strong>Пол:</strong> @OutputMale</h3>
    } 
    else 
    {
        <h3><strong>Male:</strong> Все</h3>
    } 

    @if (_specialization is not null)
    {
        <h3><strong>Specialization:</strong> @_specialization.Name</h3>
    } 
    else 
    {
        <h3><strong>Specialization:</strong> NaN</h3>
    }
   
    <button @onclick="DeleteCabinet" type="button" class="btn btn-primary"><img width="15" src="/css/Images/Trash.svg" alt="icon of medical card"> Удалить</button>
</div>

<div class="input-card">
    <label for="input-number">Название:</label>
    <input type="text" id="input-name" name="input-number" @bind="_service.Name">
    <label for="input-number">Цена:</label>
    <input type="number" id="input-price" name="input-number" @bind="_service.Price">
    <label for="input-number">Cпециализация врача:</label>
    <select @bind="_service.SpecializationId">
        @foreach(var i in _specializations)
        {
            <option value="@i.Id"> @i.Name </option>
        }
    </select>
    <div class="checkbox-wrapper">
        <label for="input-number">Пол:</label>
        <select name="gender" id="gender" @bind="_gender">
            <option value="муж">муж</option>
            <option value="жен">жен</option>
            <option value="все">все</option>
        </select>
    </div>
    <button @onclick="UpdateService" type="button" class="btn btn-primary">Update</button>
</div>


@code {
    private string OutputMale;
    [Parameter] public int Id { get; set; }
    public List<SpecializationOutputModel> _specializations;
    public string Specialization { get; set; }
    [Parameter] public ServiceOutputModel _service { get; set; }
    [Parameter] public SpecializationOutputModel _specialization { get; set; }
    private string _gender;

    protected override void OnInitialized()
    {
        _specializations = new SpecializationManager().GetAllSpecializations();
        _service = new ServiceManager().GetServiceById(Id);
        _specialization = new SpecializationManager().GetSpecializationById(_service.SpecializationId);

        if (_service.Male == true)
        {
            _gender = "муж";
        }
        if (_service.Male == false)
        {
            _gender = "жен";
        }
        if (_service.Male is null)
        {
            _gender = "все";
        }
    }

    private void UpdateService()
    {
        if (_gender == "муж")
        {
            _service.Male = true;
        }
        if (_gender == "жен")
        {
            _service.Male = false;
        }
        if (_gender == "все")
        {
            _service.Male = null;
        }

        var us = new UpdateServiceInputModel()
            {
                Id = _service.Id,
                Name = _service.Name,
                Price = _service.Price,
                SpecializationId = _service.SpecializationId,
                Male = _service.Male
            };
        new ServiceManager().UpdateService(us);
        Navigator.NavigateTo("/services", true);
    }

    private void DeleteCabinet()
    {
        var us = new UpdateServiceInputModel()
            {
                Id = _service.Id,
                IsDeleted = true
            };
        new ServiceManager().UpdateIsDeletedServiceById(us);
        Navigator.NavigateTo("/services", true);
        
    }
}

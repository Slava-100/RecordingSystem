@page "/recording"
<div>
    <span>Выбери число:</span><select @onclick="ResetDate" @bind="_crntDate">
        @for(int i = 0; i < 7; i++)
        {
            <option value="@_date"> @_date.ToShortDateString() </option>
            _date = _date.AddDays(1);
        }
    </select>
    <span>Выбери доктора:</span><select @onclick="ResetDate" @bind="_id">
        @foreach (var doc in _doctors)
        {
            <option value="@doc.Id"> @doc.Name @doc.LastName </option>
        }
    </select>
    <button class="btn-showrecording" @onclick="ShowRecording">Показать расписание</button>
    <div class="recording-div">
        @if (_timeRecordings.Count != 0)
        {
            <ul class="page-menu">
                <li>
                    <span>|Время|</span>
                    <em>|Свободно/Занято|</em>
                </li>
                @foreach (var tt in _timeRecordings)
                {
                    <li class="li-recording"><span>@tt.TimeTable.TimeSpan.Start - @tt.TimeTable.TimeSpan.End</span>
                        @if(tt.Occupied == false)
                        {
                            <a href="/recordingall/sign/@tt.Id">
                            <button  class="btn-recording" id="rec">Записаться</button>
                            </a>
                            <em>Свободно</em>  
                        }
                        else
                        {

                            <button class="btn-recording" id="norec">Записаться</button>

                            <em>Занято</em>
                        }
                    </li>
                }
            </ul>
        }
    </div>
</div>

@code {
    private int _id;
    private DateTime _date;
    private DateTime _crntDate;
    private List<DoctorOutputModel> _doctors;
    private List<TimeRecordingOutputModel> _timeRecordings { get; set; }
    private TimeRecordingOutputModel tt;

    protected override void OnInitialized()
    {
        _doctors = new DoctorManager().GetAllDoctors();
        _date = DateTime.Now;
        _crntDate = new DateTime();
        _timeRecordings = new List<TimeRecordingOutputModel>();
        tt = new TimeRecordingOutputModel();
    }

    private void ResetDate()
    {
        _date = DateTime.Now;
    }

    private void ShowRecording()
    {
        _timeRecordings = new TimeRecordingManager().GetAllTimeRecordingsByDoctorIdAndDay(_crntDate, _id);
        InvokeAsync(StateHasChanged);
        _date = DateTime.Now;
    }
}

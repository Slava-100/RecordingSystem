@page "/cabinet/{Id:int}"
@inject NavigationManager Navigator

@using System.Timers
@using System.Threading.Tasks

<div class="cabinet-card">
    <CabinetCard cabinet="_cabinet" />
</div>

<div class="input-card">
    <label for="input-number">Number:</label>
    @if (_bindNumber <= 0)
    {
        <input type="number" id="input-number" name="input-number" style="border: 1px solid red" @bind="_bindNumber">
    }
    else
    {
        if (SearchExistingCabinet(_bindNumber))
        {
                    <input type="number" id="input-number" name="input-number" @bind="_bindNumber">  <span style="color:red">Такой кабинет существует</span> 
        }
        else
        {
                    <input type="number" id="input-number" name="input-number" @bind="_bindNumber">   
        }
    }
    <div class="checkbox-wrapper">
        <label class="checkbox-label" for="input-checkbox">Status</label>
        <input type="checkbox" id="input-checkbox" name="input-checkbox" @bind="_cabinet.Status">
    </div>

    @if (_bindNumber > 0 && !SearchExistingCabinet(_bindNumber))
    {
        <button class="btn btn-primary" @onclick="@(() => { showModal = true; })">Update </button>
    }
    @if (showModal)
    {
        <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <h1>Вы уверены?</h1>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="UpdateCabinet">Да</button>
                        @if (showInfoModal && StatusOfOperation == false)
                        {
                            showModal = false;

                            <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
                                <div class="modal-dialog modal-dialog-centered" role="document">
                                    <div class="modal-content">
                                        <div class="modal-body">
                                            <h1>
                                                <img width="110" src="/css/Images/Check.svg" alt="icon of Check">OK 
                                            </h1>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <button type="button" class="btn btn-secondary" @onclick="DoСancellation">Нет</button>
                        @if (showInfoModal && StatusOfOperation == true)
                        {
                            showModal = false;

                            <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
                                <div class="modal-dialog modal-dialog-centered" role="document">
                                    <div class="modal-content">
                                        <div class="modal-body">
                                            <h1>
                                                <img width="110" src="/css/Images/Remove.svg" alt="icon of Check">Отмена 
                                            </h1>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public EventCallback<int> BtnEvent { get; set; }
    private bool showModal;
    private bool showInfoModal;
    private bool StatusOfOperation;
    private Timer _timer;
    private int _bindNumber;

    private List<CabinetOutputModel> _cabinetsList;
    private CabinetOutputModel _cabinet;

    protected override void OnInitialized()
    {
        _cabinetsList = new CabinetManager().GetAllCabinets();
        foreach (var i in _cabinetsList)
        {
            if(i.Id == Id)
            {
                _cabinet = i;
            }
        }
        showModal = false;
        showInfoModal = false;
        _timer = new Timer();
        _timer.Interval = 2000;
        _timer.Elapsed += StopShowing;
    }
    private void UpdateCabinet()
    {
        var up = new UpdateCabinetInputModel()
            {
                Id = _cabinet.Id,
                Number = _bindNumber,
                Status = _cabinet.Status
        };
        new CabinetManager().UpdateCabinetById(up);

        showInfoModal = true;
        StatusOfOperation = false;
        _timer.Start();

    }

    private void DoСancellation()
    {
        showInfoModal = true;
        StatusOfOperation = true;
        _timer.Start();
    }

    private void StopShowing(object sender, ElapsedEventArgs args)
    {
        showModal = false;
        showInfoModal = false;
        InvokeAsync(StateHasChanged);
        _timer.Stop();
        Navigator.NavigateTo("/cabinets", true);
    }

    private bool SearchExistingCabinet(int numberCabinet)
    {
        foreach (var i in _cabinetsList)
        {
            if(i.Number == numberCabinet)
            {
                return true;
            }
        }
        return false;
    }
}
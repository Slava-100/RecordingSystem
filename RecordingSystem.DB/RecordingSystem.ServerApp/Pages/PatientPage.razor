@page "/patient/{Id:int}"
@inject NavigationManager Navigator

<div class="div_patient">
<h3>PatientPage</h3>
<h3><PatientCard patient="_patient" /></h3>

    <div>        
        <button @onclick="DeletePatient" type="button" class="btn btn-primary"><img width="15" src="/css/Images/Trash.svg" alt="icon of medical card"> Удалить</button>
    </div>

<br /> <br />
 <button @onclick="ShowActiveRecordings">Активные записи</button>
    <div class="div_active">
    @if (_activeRecordings.Count() == 0 && _showActive == true)
    {
            <h3>Активных записей нет</h3>
    }
    else if (_showActive == true)
    {
    <ul class="page-menu" id="active">
        <li>
            <a href=""><span>|Врач|</span></a>
            <em>|Время|</em>
        </li>
        @foreach (var a in _activeRecordings)
        {
            <li class="li-recording"><span> @a.Doctor.Name @a.Doctor.LastName </span>
                        <button @onclick="(() => AddDiagnosis(a))" class="btn-active" id="diagnoz">Поставить диагноз</button>
                        <button @onclick="(() => DeleteActiveRecording(a))" class="btn-active" id="cancel">Отменить запись</button>
                <em>@a.DateTime</em></li>
        }
    </ul>
    }
    </div>
    <button @onclick="ShowHistory">История</button>
    <div class="div_history">
        @if(_showHistory == true){
            @if (_recordingHistory.Count() == 0)
            {
                <h3>Нет записей в истории</h3>
            }
            else
            {
            <ul class="page-menu">
                <li>
                    <a href=""><span>|Диагноз|</span></a>
                    <em>|Дата|</em>
                </li>
                @foreach (var r in _recordingHistory)
                {
                    <a href="/recording-history/@r.Id"><li class="li-history"><span> @r.Diagnosis.Name </span><em>@r.ActiveRecording.DateTime</em></li></a>
                }
            </ul>
            }
        }
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    private List<PatientOutputModel> _patientList;
    private PatientOutputModel _patient;
    private List<ActiveRecordingOutputModel> _activeRecordings;
    private bool _showActive = false;
    private bool _showHistory = false;
    private List<RecordingHistoryOutputModel> _recordingHistory;

    protected override void OnInitialized()
    {
        _patientList = new PatientManager().GetAllPatients();
        foreach (var i in _patientList)
        {
            if (i.Id == Id)
            {
                _patient = i;
            }
        }
        _activeRecordings = new List<ActiveRecordingOutputModel>();
    }

    private void UpdatePatient()
    {
        var up = new PatientInputModel()
            {
                Id = _patient.Id,
                PhoneNumber = _patient.PhoneNumber
            };
        new PatientManager().UpdatePatient(up);
    }

    private void DeletePatient()
    {
        var dp = new UpdateIsDeletedPatientModel()
            {
                Id = _patient.Id,
                IsDeleted = true
            };
        new PatientManager().DeletePatient(dp);
    Navigator.NavigateTo("/patients", true);
    }

    private void ShowActiveRecordings()
    {
        _showActive = true;
        _activeRecordings = new ActiveRecordingManager().GetAllActiveRecordingsByPatientId(Id);
        InvokeAsync(StateHasChanged);
    }

    private void DeleteActiveRecording(ActiveRecordingOutputModel activeRecording)
    {
        UpdateIsDeletedActiveRecordingModel updateIsDeletedActiveRecordingModel = new UpdateIsDeletedActiveRecordingModel()
        {
            Id = activeRecording.Id,
            IsDeleted = true
        };
        new ActiveRecordingManager().UpdateIsDeletedActiveRecordingById(updateIsDeletedActiveRecordingModel);

        var crntListOutputTimeR = new TimeRecordingManager().GetAllTimeRecordingsByDoctorIdAndDay(activeRecording.DateTime, activeRecording.Doctor.Id);
        var crntOutputTimeRecording = crntListOutputTimeR.Find(tr => activeRecording.DateTime == tr.Date + tr.TimeTable.TimeSpan.Start);

        UpdateTimeRecordingInputModel updateTimeRecordingInputModel = new UpdateTimeRecordingInputModel()
        {
            Id = crntOutputTimeRecording.Id,
            Date = crntOutputTimeRecording.Date,
            TimeTableId = crntOutputTimeRecording.TimeTableId,
            Occupied = false
        };

        new TimeRecordingManager().UpdateTimeRecordingById(updateTimeRecordingInputModel);

        _activeRecordings = new ActiveRecordingManager().GetAllActiveRecordingsByPatientId(Id);
        InvokeAsync(StateHasChanged);
    }

    private void AddDiagnosis(ActiveRecordingOutputModel activeRecording)
    {
        Navigator.NavigateTo("/addDiagnosis/" + activeRecording.Id.ToString(), true);
    }

    private void ShowHistory()
    {
        _showHistory = true;
        _recordingHistory = new RecordingHistoryManager().GetRecordingHistoryByPatientId(Id);
        InvokeAsync(StateHasChanged);
    }
}

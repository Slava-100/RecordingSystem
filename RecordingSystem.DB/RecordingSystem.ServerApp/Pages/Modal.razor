@page "/modal"

@using System.Timers
@using System.Threading.Tasks

<button class="btn btn-primary" @onclick="@(() => { showModal = true; })">Событие @CallEventOfModal</button>
@if (showModal)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
                <div class="modal-content">
@*                    <div class="modal-header">
                        <h5 class="modal-title">Событие</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>*@
                    <div class="modal-body">
                    <h1>Вы уверены?</h1>
                    @*@FirstModalBody*@
                    </div>
                    <div class="modal-footer">

                    <button type="button" class="btn btn-primary" @onclick="Create">Да</button>
                    @if (showInfoModal)
                    {
                        showModal = false;

                        <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
                            <div class="modal-dialog modal-dialog-centered" role="document">
                                @*<div class="modal-content">*@
                                    @*<div class="modal-body">*@
                                            <img width="110" src="/css/Images/Check.svg" alt="icon of Check" sizes="">
                                        @*@SecondtModalBody*@
                                    @*</div>*@
                                @*</div>*@
                            </div>
                        </div>
                    }
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Нет</button>
                    </div>
                </div>
            </div>
        </div>
}

@code {
    [Parameter] public string CallEventOfModal { get; set; }
    //[Parameter] public string FirstModalBody { get; set; }
    //[Parameter] public string SecondtModalBody { get; set; }
    [Parameter] public RenderFragment FirstModalBody { get; set; }
    [Parameter] public RenderFragment SecondtModalBody { get; set; }

    private bool showModal;
    private bool showInfoModal;
    private Timer _timer;

    protected override void OnInitialized()
    {
        showModal = false;
        showInfoModal = false;
        _timer = new Timer();
        _timer.Interval = 2000;
        _timer.Elapsed += StopShowing;
    }

    private void Create()
    {
        showInfoModal = true;
        _timer.Start();
    }

    private void StopShowing(object sender, ElapsedEventArgs args)
    {
        showModal = false;
        showInfoModal = false;
        InvokeAsync(StateHasChanged);
        _timer.Stop();
    }
}